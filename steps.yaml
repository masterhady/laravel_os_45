1- terminal --> 
        php -v   => 8.2 
        > --> upgrade 

2- Package Manager  --> composer 

https://getcomposer.org/download/ 

3- make sure composer --> composer -v 


4- to create laravel project: 
        1- composer global require laravel/installer
            2- laravel new PROJECTNAME

        OR 

        2- composer create-project laravel/laravel PROJECTNAME

5- cd your-new-project 

6- to display all artisan command lines: 
    php artisan 

7- to run the server: 
    php artisan serve 

8- using v11 or v12 --> make error --> the defualt database is sqlite: 
    change from .env 
        DB_CONNECTION=mysql
        DB_HOST=127.0.0.1
        DB_PORT=3306
        DB_DATABASE=laravel_os
        DB_USERNAME=root
        DB_PASSWORD=

9-      npm --> nodemodules 
        composer --> vendor 

10- sec error --> can't find table: 
        php artisan migrate   // crate tables in the database 

11- to create a controller: 
        - naming convention for laravel is:
                https://style-guide.vivifyideas.com/laravel-style-guide.html#follow-laravel-naming-conventions

        - php artisan make:controller ControllerName
______________________________________________________________


MVC --> Models Views Controller 


connect to database : 
to deal with the database in laravel, we need to create a model

---> create schema: 

--> Migrations --> create tables 

=---> php artisan migrate  --> to run migrations file to effect in the database 

==> php artisan migrate:rollback  --> to rollback the last migration

==> php artisan make:migration create_users_table  --> to create migration file



avalable datatype in laravel: 
        https://laravel.com/docs/12.x/migrations#columns


column in laravel --> by default --> Null 

__________________________________________________ 

Courses : 
                1- create controller --> php artisan make:controller CourseController 


        ORM --> Object Relational Mapping


        table --> plural --> courses 


        model --> singular --> Course --> object --> row 

php artisan make:model Course --> to create model --> table courses 

___________________________________________________________

Module --> Courses: 
        1- create migration files --> config table: 
                php artisan make:migration create_courses_table 
        2- run migration: 
                php artisan migrate 
        3- create your CourseController:
                php artisan make:controller CourseController 
        4- create Model:
                php artisan make:model Course
        5- implement your routes in web.php
        6- create your views

_____________________________________________________________________

create module category: 
        create migration, models, controller, routes, views 
php artisan make:model Category -mcr

        -m --> crreate migration files --> DONE
        -c --> controller  --> 
        -r --> resource 


  GET|HEAD        categories .......................... categories.index › CategoryController@index

  POST            categories ....................... categories.store › CategoryController@store


  GET|HEAD        categories/create ......... categories.create › CategoryController@create


  GET|HEAD        categories/{category} ......... categories.show › CategoryController@show



  PUT|PATCH       categories/{category} ....................... categories.update › CategoryController@update


  DELETE          categories/{category} ..................... categories.destroy › CategoryController@destroy

  GET|HEAD        categories/{category}/edit ...................... categories.edit › CategoryController@edit



  Categor Course 

  couser --> one category 

  category --> many courses

  one to many 

  course belongs to category 

  category has many courses 
  _____________________________________________

  module --> Teacher: 

        create migration, model, controller, factory, seeder, request, policy

        php artisan make:model Teacher --all 

1- Migration Files: 
        make migration + run migration 

2- Controller Files: 


3- Model File: 


4- Route


5- Views



---> add column --> created_by 
 
 --> Create Migration Files: 


 teachers       users


 teacher --> belongs --> one user 

 users --> has many -> teachers 

 ___________________________________________________________

 // add new column --> users --> role enum

 // create authoirization --> 
 admin


 user create teacher --> delete + update  


 guest 


 ----> Gate 

 Day 4: 
        1- create Request Files: 
                 php artisan make:model Teacher --all 

        2- move all validations rules to Request/StoreTeacherRequest.php

        3- create function messages Request/StoreTeacherRequest.php --> to write all custom messgas

        4-Middleware: 
                1- auth: 
                        1- Routes:
                        ->middleware("auth");


                        2- Controller
                                function __construct(){
                                        $this->middleware("auth")->only["", "", ]
                                        OR
                                        $this->middleware("auth")->except["", "", ]
                                }
                         

                        3- StoreTeacherRequest: 
                                 public function authorize(): bool
                                {
                                                
                                        return Auth::user() !== null ;
                                }

5- Authorization: 
        1- Gate: 
               in folder --> Provider/AppServiceProvider.php 
                use App\Models\Teacher;
                use App\Models\User;
                use Illuminate\Support\Facades\Gate;

                public function boot()
                {
                    Gate::define("create-teacher", function (User $user) {
                        return $user->role === "admin";
                    });
                }

to use Gate: 

        1- in Controller: 
                use Illuminate\Support\Facades\Gate;

                public function store(StoreTeacherRequest $request)
                {
                   Gate::authorize("create-teacher")
                }

        2- in Views: 
                @can("create-teacher")
                        <a href="{{ route("teachers.create") }}" class="btn btn-primary">Create Teacher</a>
                @endcan
                __________________________________

Day5: 
        php artisan install:api


best practice--> unfiform data --> inform of object --> apiResource 

php artisan make:resource TeacherResource

-------------------------
sanctum --> authintaction 


Auth API:       
        JWT 
        Sanctum
Types  API: 

